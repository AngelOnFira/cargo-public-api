pub const syntect::highlighting::Color::BLACK: Color
pub const syntect::highlighting::Color::WHITE: Color
pub const syntect::highlighting::FontStyle::BOLD: Self
pub const syntect::highlighting::FontStyle::ITALIC: Self
pub const syntect::highlighting::FontStyle::UNDERLINE: Self
pub const syntect::parsing::ATOM_LEN_BITS: u16
pub enum syntect::LoadingError
pub enum syntect::highlighting::ParseThemeError
pub enum syntect::highlighting::SettingsError
pub enum syntect::highlighting::UnderlineOption
pub enum syntect::html::ClassStyle
pub enum syntect::html::IncludeBackground
pub enum syntect::parsing::BasicScopeStackOp
pub enum syntect::parsing::ClearAmount
pub enum syntect::parsing::ParseScopeError
pub enum syntect::parsing::ParseSyntaxError
pub enum syntect::parsing::ScopeStackOp
pub enum syntect::parsing::syntax_definition::ContextReference
pub enum syntect::parsing::syntax_definition::MatchOperation
pub enum syntect::parsing::syntax_definition::Pattern
pub enum variant syntect::LoadingError::BadPath
pub enum variant syntect::LoadingError::Io(IoError)
pub enum variant syntect::LoadingError::ParseSyntax(ParseSyntaxError,Option<String>)
pub enum variant syntect::LoadingError::ParseTheme(ParseThemeError)
pub enum variant syntect::LoadingError::ReadSettings(SettingsError)
pub enum variant syntect::LoadingError::WalkDir(walkdir::Error)
pub enum variant syntect::highlighting::ParseThemeError::ColorShemeScopeIsNotObject
pub enum variant syntect::highlighting::ParseThemeError::ColorShemeSettingsIsNotObject
pub enum variant syntect::highlighting::ParseThemeError::DuplicateSettings
pub enum variant syntect::highlighting::ParseThemeError::IncorrectColor
pub enum variant syntect::highlighting::ParseThemeError::IncorrectFontStyle(String)
pub enum variant syntect::highlighting::ParseThemeError::IncorrectSettings
pub enum variant syntect::highlighting::ParseThemeError::IncorrectSyntax
pub enum variant syntect::highlighting::ParseThemeError::IncorrectUnderlineOption
pub enum variant syntect::highlighting::ParseThemeError::ScopeParse(ParseScopeError)
pub enum variant syntect::highlighting::ParseThemeError::ScopeSelectorIsNotString(String)
pub enum variant syntect::highlighting::ParseThemeError::UndefinedScopeSettings(String)
pub enum variant syntect::highlighting::ParseThemeError::UndefinedSettings
pub enum variant syntect::highlighting::SettingsError::Plist(PlistError)
pub enum variant syntect::highlighting::UnderlineOption::None
pub enum variant syntect::highlighting::UnderlineOption::SquigglyUnderline
pub enum variant syntect::highlighting::UnderlineOption::StippledUnderline
pub enum variant syntect::highlighting::UnderlineOption::Underline
pub enum variant syntect::html::ClassStyle::Spaced
pub enum variant syntect::html::ClassStyle::SpacedPrefixed
pub enum variant syntect::html::IncludeBackground::IfDifferent(Color)
pub enum variant syntect::html::IncludeBackground::No
pub enum variant syntect::html::IncludeBackground::Yes
pub enum variant syntect::parsing::BasicScopeStackOp::Pop
pub enum variant syntect::parsing::BasicScopeStackOp::Push(Scope)
pub enum variant syntect::parsing::ClearAmount::All
pub enum variant syntect::parsing::ClearAmount::TopN(usize)
pub enum variant syntect::parsing::ParseScopeError::TooLong
pub enum variant syntect::parsing::ParseScopeError::TooManyAtoms
pub enum variant syntect::parsing::ParseSyntaxError::BadFileRef
pub enum variant syntect::parsing::ParseSyntaxError::EmptyFile
pub enum variant syntect::parsing::ParseSyntaxError::InvalidScope(ParseScopeError)
pub enum variant syntect::parsing::ParseSyntaxError::InvalidYaml(ScanError)
pub enum variant syntect::parsing::ParseSyntaxError::MainMissing
pub enum variant syntect::parsing::ParseSyntaxError::MissingMandatoryKey(&'static str)
pub enum variant syntect::parsing::ParseSyntaxError::RegexCompileError(String,Box<Error + Send + Sync + 'static>)
pub enum variant syntect::parsing::ParseSyntaxError::TypeMismatch
pub enum variant syntect::parsing::ScopeStackOp::Clear(ClearAmount)
pub enum variant syntect::parsing::ScopeStackOp::Noop
pub enum variant syntect::parsing::ScopeStackOp::Pop(usize)
pub enum variant syntect::parsing::ScopeStackOp::Push(Scope)
pub enum variant syntect::parsing::ScopeStackOp::Restore
pub enum variant syntect::parsing::syntax_definition::ContextReference::ByScope
pub enum variant syntect::parsing::syntax_definition::ContextReference::Direct(ContextId)
pub enum variant syntect::parsing::syntax_definition::ContextReference::File
pub enum variant syntect::parsing::syntax_definition::ContextReference::Inline(String)
pub enum variant syntect::parsing::syntax_definition::ContextReference::Named(String)
pub enum variant syntect::parsing::syntax_definition::MatchOperation::None
pub enum variant syntect::parsing::syntax_definition::MatchOperation::Pop
pub enum variant syntect::parsing::syntax_definition::MatchOperation::Push(Vec<ContextReference>)
pub enum variant syntect::parsing::syntax_definition::MatchOperation::Set(Vec<ContextReference>)
pub enum variant syntect::parsing::syntax_definition::Pattern::Include(ContextReference)
pub enum variant syntect::parsing::syntax_definition::Pattern::Match(MatchPattern)
pub fn syntect::LoadingError::cause(&self) -> Option<&Error>
pub fn syntect::LoadingError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::LoadingError::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn syntect::LoadingError::from(error: IoError) -> LoadingError
pub fn syntect::LoadingError::from(error: ParseSyntaxError) -> LoadingError
pub fn syntect::LoadingError::from(error: ParseThemeError) -> LoadingError
pub fn syntect::LoadingError::from(error: SettingsError) -> LoadingError
pub fn syntect::dumps::dump_binary<T: Serialize>(o: &T) -> Vec<u8>
pub fn syntect::dumps::dump_to_file<T: Serialize, P: AsRef<Path>>(o: &T, path: P) -> Result<()>
pub fn syntect::dumps::dump_to_writer<T: Serialize, W: Write>(to_dump: &T, output: W) -> Result<()>
pub fn syntect::dumps::from_binary<T: DeserializeOwned>(v: &[u8]) -> T
pub fn syntect::dumps::from_dump_file<T: DeserializeOwned, P: AsRef<Path>>(path: P) -> Result<T>
pub fn syntect::dumps::from_reader<T: DeserializeOwned, R: BufRead>(input: R) -> Result<T>
pub fn syntect::easy::HighlightFile::new<P: AsRef<Path>>(path_obj: P, ss: &SyntaxSet, theme: &'a Theme) -> io::Result<HighlightFile<'a>>
pub fn syntect::easy::HighlightLines::highlight<'b>(&mut self, line: &'b str, syntax_set: &SyntaxSet) -> Vec<(Style, &'b str)>
pub fn syntect::easy::HighlightLines::new(syntax: &SyntaxReference, theme: &'a Theme) -> HighlightLines<'a>
pub fn syntect::easy::ScopeRegionIterator::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::easy::ScopeRegionIterator::new(ops: &'a [(usize, ScopeStackOp)], line: &'a str) -> ScopeRegionIterator<'a>
pub fn syntect::easy::ScopeRegionIterator::next(&mut self) -> Option<<Self as >::Item>
pub fn syntect::highlighting::Color::clone(&self) -> Color
pub fn syntect::highlighting::Color::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::Color::eq(&self, other: &Color) -> bool
pub fn syntect::highlighting::Color::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::Color::from_str(s: &str) -> Result<Color, <Self as >::Err>
pub fn syntect::highlighting::Color::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()
pub fn syntect::highlighting::Color::ne(&self, other: &Color) -> bool
pub fn syntect::highlighting::Color::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::FontStyle::all() -> Self
pub fn syntect::highlighting::FontStyle::bitand(self, other: Self) -> Self
pub fn syntect::highlighting::FontStyle::bitand_assign(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::bitor(self, other: FontStyle) -> Self
pub fn syntect::highlighting::FontStyle::bitor_assign(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::bits(&self) -> u8
pub fn syntect::highlighting::FontStyle::bitxor(self, other: Self) -> Self
pub fn syntect::highlighting::FontStyle::bitxor_assign(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::clone(&self) -> FontStyle
pub fn syntect::highlighting::FontStyle::cmp(&self, other: &FontStyle) -> $crate::cmp::Ordering
pub fn syntect::highlighting::FontStyle::complement(self) -> Self
pub fn syntect::highlighting::FontStyle::contains(&self, other: Self) -> bool
pub fn syntect::highlighting::FontStyle::default() -> FontStyle
pub fn syntect::highlighting::FontStyle::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::FontStyle::difference(self, other: Self) -> Self
pub fn syntect::highlighting::FontStyle::empty() -> Self
pub fn syntect::highlighting::FontStyle::eq(&self, other: &FontStyle) -> bool
pub fn syntect::highlighting::FontStyle::extend<T: $crate::_core::iter::IntoIterator<Item = Self>>(&mut self, iterator: T)
pub fn syntect::highlighting::FontStyle::fmt(&self, f: &mut $crate::_core::fmt::Formatter<'_>) -> $crate::_core::fmt::Result
pub fn syntect::highlighting::FontStyle::fmt(&self, f: &mut $crate::_core::fmt::Formatter<'_>) -> $crate::_core::fmt::Result
pub fn syntect::highlighting::FontStyle::fmt(&self, f: &mut $crate::_core::fmt::Formatter<'_>) -> $crate::_core::fmt::Result
pub fn syntect::highlighting::FontStyle::fmt(&self, f: &mut $crate::_core::fmt::Formatter<'_>) -> $crate::_core::fmt::Result
pub fn syntect::highlighting::FontStyle::fmt(&self, f: &mut $crate::_core::fmt::Formatter<'_>) -> $crate::_core::fmt::Result
pub fn syntect::highlighting::FontStyle::from_bits(bits: u8) -> $crate::_core::option::Option<Self>
pub fn syntect::highlighting::FontStyle::from_bits_truncate(bits: u8) -> Self
pub fn syntect::highlighting::FontStyle::from_bits_unchecked(bits: u8) -> Self
pub fn syntect::highlighting::FontStyle::from_iter<T: $crate::_core::iter::IntoIterator<Item = Self>>(iterator: T) -> Self
pub fn syntect::highlighting::FontStyle::from_str(s: &str) -> Result<FontStyle, <Self as >::Err>
pub fn syntect::highlighting::FontStyle::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()
pub fn syntect::highlighting::FontStyle::insert(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::intersection(self, other: Self) -> Self
pub fn syntect::highlighting::FontStyle::intersects(&self, other: Self) -> bool
pub fn syntect::highlighting::FontStyle::is_all(&self) -> bool
pub fn syntect::highlighting::FontStyle::is_empty(&self) -> bool
pub fn syntect::highlighting::FontStyle::ne(&self, other: &FontStyle) -> bool
pub fn syntect::highlighting::FontStyle::not(self) -> Self
pub fn syntect::highlighting::FontStyle::partial_cmp(&self, other: &FontStyle) -> $crate::option::Option<$crate::cmp::Ordering>
pub fn syntect::highlighting::FontStyle::remove(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::FontStyle::set(&mut self, other: Self, value: bool)
pub fn syntect::highlighting::FontStyle::sub(self, other: Self) -> Self
pub fn syntect::highlighting::FontStyle::sub_assign(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::symmetric_difference(self, other: Self) -> Self
pub fn syntect::highlighting::FontStyle::toggle(&mut self, other: Self)
pub fn syntect::highlighting::FontStyle::union(self, other: Self) -> Self
pub fn syntect::highlighting::HighlightIterator::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::HighlightIterator::new(state: &'a mut HighlightState, changes: &'a [(usize, ScopeStackOp)], text: &'b str, highlighter: &'a Highlighter<'_>) -> HighlightIterator<'a, 'b>
pub fn syntect::highlighting::HighlightIterator::next(&mut self) -> Option<(Style, &'b str)>
pub fn syntect::highlighting::HighlightState::clone(&self) -> HighlightState
pub fn syntect::highlighting::HighlightState::eq(&self, other: &HighlightState) -> bool
pub fn syntect::highlighting::HighlightState::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::HighlightState::ne(&self, other: &HighlightState) -> bool
pub fn syntect::highlighting::HighlightState::new(highlighter: &Highlighter<'_>, initial_stack: ScopeStack) -> HighlightState
pub fn syntect::highlighting::Highlighter::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::Highlighter::get_default(&self) -> Style
pub fn syntect::highlighting::Highlighter::new(theme: &'a Theme) -> Highlighter<'a>
pub fn syntect::highlighting::Highlighter::style_for_stack(&self, stack: &[Scope]) -> Style
pub fn syntect::highlighting::Highlighter::style_mod_for_stack(&self, path: &[Scope]) -> StyleModifier
pub fn syntect::highlighting::ParseThemeError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ParseThemeError::from(error: ParseScopeError) -> ParseThemeError
pub fn syntect::highlighting::RangedHighlightIterator::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::RangedHighlightIterator::new(state: &'a mut HighlightState, changes: &'a [(usize, ScopeStackOp)], text: &'b str, highlighter: &'a Highlighter<'_>) -> RangedHighlightIterator<'a, 'b>
pub fn syntect::highlighting::RangedHighlightIterator::next(&mut self) -> Option<(Style, &'b str, Range<usize>)>
pub fn syntect::highlighting::ScopeSelector::clone(&self) -> ScopeSelector
pub fn syntect::highlighting::ScopeSelector::default() -> ScopeSelector
pub fn syntect::highlighting::ScopeSelector::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::ScopeSelector::does_match(&self, stack: &[Scope]) -> Option<MatchPower>
pub fn syntect::highlighting::ScopeSelector::eq(&self, other: &ScopeSelector) -> bool
pub fn syntect::highlighting::ScopeSelector::extract_scopes(&self) -> Vec<Scope>
pub fn syntect::highlighting::ScopeSelector::extract_single_scope(&self) -> Option<Scope>
pub fn syntect::highlighting::ScopeSelector::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ScopeSelector::from_str(s: &str) -> Result<ScopeSelector, ParseScopeError>
pub fn syntect::highlighting::ScopeSelector::ne(&self, other: &ScopeSelector) -> bool
pub fn syntect::highlighting::ScopeSelector::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::ScopeSelectors::clone(&self) -> ScopeSelectors
pub fn syntect::highlighting::ScopeSelectors::default() -> ScopeSelectors
pub fn syntect::highlighting::ScopeSelectors::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::ScopeSelectors::does_match(&self, stack: &[Scope]) -> Option<MatchPower>
pub fn syntect::highlighting::ScopeSelectors::eq(&self, other: &ScopeSelectors) -> bool
pub fn syntect::highlighting::ScopeSelectors::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ScopeSelectors::from_str(s: &str) -> Result<ScopeSelectors, ParseScopeError>
pub fn syntect::highlighting::ScopeSelectors::ne(&self, other: &ScopeSelectors) -> bool
pub fn syntect::highlighting::ScopeSelectors::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::ScoredStyle::clone(&self) -> ScoredStyle
pub fn syntect::highlighting::ScoredStyle::eq(&self, other: &ScoredStyle) -> bool
pub fn syntect::highlighting::ScoredStyle::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ScoredStyle::ne(&self, other: &ScoredStyle) -> bool
pub fn syntect::highlighting::SettingsError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::SettingsError::from(error: PlistError) -> SettingsError
pub fn syntect::highlighting::Style::apply(&self, modifier: StyleModifier) -> Style
pub fn syntect::highlighting::Style::clone(&self) -> Style
pub fn syntect::highlighting::Style::default() -> Style
pub fn syntect::highlighting::Style::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::Style::eq(&self, other: &Style) -> bool
pub fn syntect::highlighting::Style::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::Style::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()
pub fn syntect::highlighting::Style::ne(&self, other: &Style) -> bool
pub fn syntect::highlighting::Style::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::StyleModifier::apply(&self, other: StyleModifier) -> StyleModifier
pub fn syntect::highlighting::StyleModifier::clone(&self) -> StyleModifier
pub fn syntect::highlighting::StyleModifier::default() -> StyleModifier
pub fn syntect::highlighting::StyleModifier::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::StyleModifier::eq(&self, other: &StyleModifier) -> bool
pub fn syntect::highlighting::StyleModifier::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::StyleModifier::ne(&self, other: &StyleModifier) -> bool
pub fn syntect::highlighting::StyleModifier::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::Theme::clone(&self) -> Theme
pub fn syntect::highlighting::Theme::default() -> Theme
pub fn syntect::highlighting::Theme::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::Theme::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::Theme::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::ThemeItem::clone(&self) -> ThemeItem
pub fn syntect::highlighting::ThemeItem::default() -> ThemeItem
pub fn syntect::highlighting::ThemeItem::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::ThemeItem::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ThemeItem::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::ThemeSet::add_from_folder<P: AsRef<Path>>(&mut self, folder: P) -> Result<(), LoadingError>
pub fn syntect::highlighting::ThemeSet::default() -> ThemeSet
pub fn syntect::highlighting::ThemeSet::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::ThemeSet::discover_theme_paths<P: AsRef<Path>>(folder: P) -> Result<Vec<PathBuf>, LoadingError>
pub fn syntect::highlighting::ThemeSet::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ThemeSet::get_theme<P: AsRef<Path>>(path: P) -> Result<Theme, LoadingError>
pub fn syntect::highlighting::ThemeSet::load_defaults() -> ThemeSet
pub fn syntect::highlighting::ThemeSet::load_from_folder<P: AsRef<Path>>(folder: P) -> Result<ThemeSet, LoadingError>
pub fn syntect::highlighting::ThemeSet::load_from_reader<R: BufRead, Seek>(r: &mut R) -> Result<Theme, LoadingError>
pub fn syntect::highlighting::ThemeSet::new() -> ThemeSet
pub fn syntect::highlighting::ThemeSet::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::ThemeSettings::clone(&self) -> ThemeSettings
pub fn syntect::highlighting::ThemeSettings::default() -> ThemeSettings
pub fn syntect::highlighting::ThemeSettings::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::ThemeSettings::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::ThemeSettings::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::highlighting::UnderlineOption::clone(&self) -> UnderlineOption
pub fn syntect::highlighting::UnderlineOption::default() -> UnderlineOption
pub fn syntect::highlighting::UnderlineOption::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::highlighting::UnderlineOption::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::highlighting::UnderlineOption::from_str(s: &str) -> Result<UnderlineOption, <Self as >::Err>
pub fn syntect::highlighting::UnderlineOption::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::html::ClassStyle::clone(&self) -> ClassStyle
pub fn syntect::html::ClassStyle::eq(&self, other: &ClassStyle) -> bool
pub fn syntect::html::ClassStyle::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::html::ClassStyle::ne(&self, other: &ClassStyle) -> bool
pub fn syntect::html::ClassedHTMLGenerator::finalize(self) -> String
pub fn syntect::html::ClassedHTMLGenerator::new(syntax_reference: &'a SyntaxReference, syntax_set: &'a SyntaxSet) -> ClassedHTMLGenerator<'a>
pub fn syntect::html::ClassedHTMLGenerator::new_with_class_style(syntax_reference: &'a SyntaxReference, syntax_set: &'a SyntaxSet, style: ClassStyle) -> ClassedHTMLGenerator<'a>
pub fn syntect::html::ClassedHTMLGenerator::parse_html_for_line(&mut self, line: &str)
pub fn syntect::html::ClassedHTMLGenerator::parse_html_for_line_which_includes_newline(&mut self, line: &str)
pub fn syntect::html::IncludeBackground::clone(&self) -> IncludeBackground
pub fn syntect::html::IncludeBackground::eq(&self, other: &IncludeBackground) -> bool
pub fn syntect::html::IncludeBackground::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::html::IncludeBackground::ne(&self, other: &IncludeBackground) -> bool
pub fn syntect::html::append_highlighted_html_for_styled_line(v: &[(Style, &str)], bg: IncludeBackground, s: &mut String)
pub fn syntect::html::css_for_theme(theme: &Theme) -> String
pub fn syntect::html::css_for_theme_with_class_style(theme: &Theme, style: ClassStyle) -> String
pub fn syntect::html::highlighted_html_for_file<P: AsRef<Path>>(path: P, ss: &SyntaxSet, theme: &Theme) -> io::Result<String>
pub fn syntect::html::highlighted_html_for_string(s: &str, ss: &SyntaxSet, syntax: &SyntaxReference, theme: &Theme) -> String
pub fn syntect::html::line_tokens_to_classed_spans(line: &str, ops: &[(usize, ScopeStackOp)], style: ClassStyle, stack: &mut ScopeStack) -> (String, isize)
pub fn syntect::html::start_highlighted_html_snippet(t: &Theme) -> (String, Color)
pub fn syntect::html::styled_line_to_highlighted_html(v: &[(Style, &str)], bg: IncludeBackground) -> String
pub fn syntect::html::tokens_to_classed_html(line: &str, ops: &[(usize, ScopeStackOp)], style: ClassStyle) -> String
pub fn syntect::html::tokens_to_classed_spans(line: &str, ops: &[(usize, ScopeStackOp)], style: ClassStyle) -> (String, isize)
pub fn syntect::parsing::BasicScopeStackOp::clone(&self) -> BasicScopeStackOp
pub fn syntect::parsing::BasicScopeStackOp::eq(&self, other: &BasicScopeStackOp) -> bool
pub fn syntect::parsing::BasicScopeStackOp::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::BasicScopeStackOp::ne(&self, other: &BasicScopeStackOp) -> bool
pub fn syntect::parsing::ClearAmount::clone(&self) -> ClearAmount
pub fn syntect::parsing::ClearAmount::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::ClearAmount::eq(&self, other: &ClearAmount) -> bool
pub fn syntect::parsing::ClearAmount::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ClearAmount::ne(&self, other: &ClearAmount) -> bool
pub fn syntect::parsing::ClearAmount::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::MatchPower::clone(&self) -> MatchPower
pub fn syntect::parsing::MatchPower::cmp(&self, other: &Self) -> Ordering
pub fn syntect::parsing::MatchPower::eq(&self, other: &MatchPower) -> bool
pub fn syntect::parsing::MatchPower::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::MatchPower::ne(&self, other: &MatchPower) -> bool
pub fn syntect::parsing::MatchPower::partial_cmp(&self, other: &MatchPower) -> $crate::option::Option<$crate::cmp::Ordering>
pub fn syntect::parsing::ParseScopeError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ParseState::clone(&self) -> ParseState
pub fn syntect::parsing::ParseState::eq(&self, other: &ParseState) -> bool
pub fn syntect::parsing::ParseState::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ParseState::ne(&self, other: &ParseState) -> bool
pub fn syntect::parsing::ParseState::new(syntax: &SyntaxReference) -> ParseState
pub fn syntect::parsing::ParseState::parse_line(&mut self, line: &str, syntax_set: &SyntaxSet) -> Vec<(usize, ScopeStackOp)>
pub fn syntect::parsing::ParseSyntaxError::cause(&self) -> Option<&Error>
pub fn syntect::parsing::ParseSyntaxError::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ParseSyntaxError::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn syntect::parsing::Regex::clone(&self) -> Self
pub fn syntect::parsing::Regex::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: Deserializer<'de>
pub fn syntect::parsing::Regex::eq(&self, other: &Regex) -> bool
pub fn syntect::parsing::Regex::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::Regex::is_match(&self, text: &str) -> bool
pub fn syntect::parsing::Regex::new(regex_str: String) -> Self
pub fn syntect::parsing::Regex::regex_str(&self) -> &str
pub fn syntect::parsing::Regex::search(&self, text: &str, begin: usize, end: usize, region: Option<&mut Region>) -> bool
pub fn syntect::parsing::Regex::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: Serializer
pub fn syntect::parsing::Regex::try_compile(regex_str: &str) -> Option<Box<Error + Send + Sync + 'static>>
pub fn syntect::parsing::Region::clone(&self) -> Region
pub fn syntect::parsing::Region::eq(&self, other: &Region) -> bool
pub fn syntect::parsing::Region::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::Region::ne(&self, other: &Region) -> bool
pub fn syntect::parsing::Region::new() -> Self
pub fn syntect::parsing::Region::pos(&self, index: usize) -> Option<(usize, usize)>
pub fn syntect::parsing::SCOPE_REPO::deref(&self) -> &Mutex<ScopeRepository>
pub fn syntect::parsing::Scope::atom_at(self, index: usize) -> u16
pub fn syntect::parsing::Scope::build_string(self) -> String
pub fn syntect::parsing::Scope::clone(&self) -> Scope
pub fn syntect::parsing::Scope::cmp(&self, other: &Scope) -> $crate::cmp::Ordering
pub fn syntect::parsing::Scope::default() -> Scope
pub fn syntect::parsing::Scope::deserialize<D>(deserializer: D) -> Result<Self, <D as >::Error> where D: Deserializer<'de>
pub fn syntect::parsing::Scope::eq(&self, other: &Scope) -> bool
pub fn syntect::parsing::Scope::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn syntect::parsing::Scope::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn syntect::parsing::Scope::from_str(s: &str) -> Result<Scope, ParseScopeError>
pub fn syntect::parsing::Scope::hash<__H: $crate::hash::Hasher>(&self, state: &mut __H) -> ()
pub fn syntect::parsing::Scope::is_empty(&self) -> bool
pub fn syntect::parsing::Scope::is_prefix_of(self, s: Scope) -> bool
pub fn syntect::parsing::Scope::len(self) -> u32
pub fn syntect::parsing::Scope::ne(&self, other: &Scope) -> bool
pub fn syntect::parsing::Scope::new(s: &str) -> Result<Scope, ParseScopeError>
pub fn syntect::parsing::Scope::partial_cmp(&self, other: &Scope) -> $crate::option::Option<$crate::cmp::Ordering>
pub fn syntect::parsing::Scope::serialize<S>(&self, serializer: S) -> Result<<S as >::Ok, <S as >::Error> where S: Serializer
pub fn syntect::parsing::ScopeRepository::atom_str(&self, atom_number: u16) -> &str
pub fn syntect::parsing::ScopeRepository::build(&mut self, s: &str) -> Result<Scope, ParseScopeError>
pub fn syntect::parsing::ScopeRepository::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ScopeRepository::to_string(&self, scope: Scope) -> String
pub fn syntect::parsing::ScopeStack::apply(&mut self, op: &ScopeStackOp)
pub fn syntect::parsing::ScopeStack::apply_with_hook<F>(&mut self, op: &ScopeStackOp, hook: F) where F: FnMutFn<BasicScopeStackOp, &[Scope]>
pub fn syntect::parsing::ScopeStack::as_slice(&self) -> &[Scope]
pub fn syntect::parsing::ScopeStack::bottom_n(&self, n: usize) -> &[Scope]
pub fn syntect::parsing::ScopeStack::clone(&self) -> ScopeStack
pub fn syntect::parsing::ScopeStack::debug_print(&self, repo: &ScopeRepository)
pub fn syntect::parsing::ScopeStack::default() -> ScopeStack
pub fn syntect::parsing::ScopeStack::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::ScopeStack::does_match(&self, stack: &[Scope]) -> Option<MatchPower>
pub fn syntect::parsing::ScopeStack::eq(&self, other: &ScopeStack) -> bool
pub fn syntect::parsing::ScopeStack::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ScopeStack::fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result
pub fn syntect::parsing::ScopeStack::from_str(s: &str) -> Result<ScopeStack, ParseScopeError>
pub fn syntect::parsing::ScopeStack::from_vec(v: Vec<Scope>) -> ScopeStack
pub fn syntect::parsing::ScopeStack::is_empty(&self) -> bool
pub fn syntect::parsing::ScopeStack::len(&self) -> usize
pub fn syntect::parsing::ScopeStack::ne(&self, other: &ScopeStack) -> bool
pub fn syntect::parsing::ScopeStack::new() -> ScopeStack
pub fn syntect::parsing::ScopeStack::pop(&mut self)
pub fn syntect::parsing::ScopeStack::push(&mut self, s: Scope)
pub fn syntect::parsing::ScopeStack::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::ScopeStackOp::clone(&self) -> ScopeStackOp
pub fn syntect::parsing::ScopeStackOp::eq(&self, other: &ScopeStackOp) -> bool
pub fn syntect::parsing::ScopeStackOp::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::ScopeStackOp::ne(&self, other: &ScopeStackOp) -> bool
pub fn syntect::parsing::SyntaxReference::clone(&self) -> SyntaxReference
pub fn syntect::parsing::SyntaxReference::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::SyntaxReference::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::SyntaxReference::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::SyntaxSet::clone(&self) -> SyntaxSet
pub fn syntect::parsing::SyntaxSet::default() -> Self
pub fn syntect::parsing::SyntaxSet::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::SyntaxSet::find_syntax_by_extension<'a>(&'a self, extension: &str) -> Option<&'a SyntaxReference>
pub fn syntect::parsing::SyntaxSet::find_syntax_by_first_line<'a>(&'a self, s: &str) -> Option<&'a SyntaxReference>
pub fn syntect::parsing::SyntaxSet::find_syntax_by_name<'a>(&'a self, name: &str) -> Option<&'a SyntaxReference>
pub fn syntect::parsing::SyntaxSet::find_syntax_by_path<'a>(&'a self, path: &str) -> Option<&'a SyntaxReference>
pub fn syntect::parsing::SyntaxSet::find_syntax_by_scope(&self, scope: Scope) -> Option<&SyntaxReference>
pub fn syntect::parsing::SyntaxSet::find_syntax_by_token<'a>(&'a self, s: &str) -> Option<&'a SyntaxReference>
pub fn syntect::parsing::SyntaxSet::find_syntax_for_file<P: AsRef<Path>>(&self, path_obj: P) -> io::Result<Option<&SyntaxReference>>
pub fn syntect::parsing::SyntaxSet::find_syntax_plain_text(&self) -> &SyntaxReference
pub fn syntect::parsing::SyntaxSet::find_unlinked_contexts(&self) -> BTreeSet<String>
pub fn syntect::parsing::SyntaxSet::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::SyntaxSet::into_builder(self) -> SyntaxSetBuilder
pub fn syntect::parsing::SyntaxSet::load_defaults_newlines() -> SyntaxSet
pub fn syntect::parsing::SyntaxSet::load_defaults_nonewlines() -> SyntaxSet
pub fn syntect::parsing::SyntaxSet::load_from_folder<P: AsRef<Path>>(folder: P) -> Result<SyntaxSet, LoadingError>
pub fn syntect::parsing::SyntaxSet::new() -> SyntaxSet
pub fn syntect::parsing::SyntaxSet::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::SyntaxSet::syntaxes(&self) -> &[SyntaxReference]
pub fn syntect::parsing::SyntaxSetBuilder::add(&mut self, syntax: SyntaxDefinition)
pub fn syntect::parsing::SyntaxSetBuilder::add_from_folder<P: AsRef<Path>>(&mut self, folder: P, lines_include_newline: bool) -> Result<(), LoadingError>
pub fn syntect::parsing::SyntaxSetBuilder::add_plain_text_syntax(&mut self)
pub fn syntect::parsing::SyntaxSetBuilder::build(self) -> SyntaxSet
pub fn syntect::parsing::SyntaxSetBuilder::clone(&self) -> SyntaxSetBuilder
pub fn syntect::parsing::SyntaxSetBuilder::default() -> SyntaxSetBuilder
pub fn syntect::parsing::SyntaxSetBuilder::new() -> SyntaxSetBuilder
pub fn syntect::parsing::SyntaxSetBuilder::syntaxes(&self) -> &[SyntaxDefinition]
pub fn syntect::parsing::syntax_definition::Context::clone(&self) -> Context
pub fn syntect::parsing::syntax_definition::Context::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::Context::eq(&self, other: &Context) -> bool
pub fn syntect::parsing::syntax_definition::Context::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::Context::match_at(&self, index: usize) -> &MatchPattern
pub fn syntect::parsing::syntax_definition::Context::ne(&self, other: &Context) -> bool
pub fn syntect::parsing::syntax_definition::Context::new(meta_include_prototype: bool) -> Context
pub fn syntect::parsing::syntax_definition::Context::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::ContextId::clone(&self) -> ContextId
pub fn syntect::parsing::syntax_definition::ContextId::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::ContextId::eq(&self, other: &ContextId) -> bool
pub fn syntect::parsing::syntax_definition::ContextId::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::ContextId::ne(&self, other: &ContextId) -> bool
pub fn syntect::parsing::syntax_definition::ContextId::new(index: usize) -> Self
pub fn syntect::parsing::syntax_definition::ContextId::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::ContextReference::clone(&self) -> ContextReference
pub fn syntect::parsing::syntax_definition::ContextReference::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::ContextReference::eq(&self, other: &ContextReference) -> bool
pub fn syntect::parsing::syntax_definition::ContextReference::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::ContextReference::id(&self) -> ContextId
pub fn syntect::parsing::syntax_definition::ContextReference::ne(&self, other: &ContextReference) -> bool
pub fn syntect::parsing::syntax_definition::ContextReference::resolve<'a>(&self, syntax_set: &'a SyntaxSet) -> &'a Context
pub fn syntect::parsing::syntax_definition::ContextReference::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::MatchIter::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::MatchIter::next(&mut self) -> Option<(&'a Context, usize)>
pub fn syntect::parsing::syntax_definition::MatchOperation::clone(&self) -> MatchOperation
pub fn syntect::parsing::syntax_definition::MatchOperation::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::MatchOperation::eq(&self, other: &MatchOperation) -> bool
pub fn syntect::parsing::syntax_definition::MatchOperation::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::MatchOperation::ne(&self, other: &MatchOperation) -> bool
pub fn syntect::parsing::syntax_definition::MatchOperation::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::MatchPattern::clone(&self) -> MatchPattern
pub fn syntect::parsing::syntax_definition::MatchPattern::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::MatchPattern::eq(&self, other: &MatchPattern) -> bool
pub fn syntect::parsing::syntax_definition::MatchPattern::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::MatchPattern::ne(&self, other: &MatchPattern) -> bool
pub fn syntect::parsing::syntax_definition::MatchPattern::new(has_captures: bool, regex_str: String, scope: Vec<Scope>, captures: Option<CaptureMapping>, operation: MatchOperation, with_prototype: Option<ContextReference>) -> MatchPattern
pub fn syntect::parsing::syntax_definition::MatchPattern::regex(&self) -> &Regex
pub fn syntect::parsing::syntax_definition::MatchPattern::regex_with_refs(&self, region: &Region, text: &str) -> Regex
pub fn syntect::parsing::syntax_definition::MatchPattern::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::Pattern::clone(&self) -> Pattern
pub fn syntect::parsing::syntax_definition::Pattern::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::Pattern::eq(&self, other: &Pattern) -> bool
pub fn syntect::parsing::syntax_definition::Pattern::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::Pattern::ne(&self, other: &Pattern) -> bool
pub fn syntect::parsing::syntax_definition::Pattern::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::clone(&self) -> SyntaxDefinition
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::deserialize<__D>(__deserializer: __D) -> _serde::__private::Result<Self, <__D as >::Error> where __D: _serde::Deserializer<'de>
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::eq(&self, other: &SyntaxDefinition) -> bool
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::fmt(&self, f: &mut $crate::fmt::Formatter<'_>) -> $crate::fmt::Result
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::load_from_str(s: &str, lines_include_newline: bool, fallback_name: Option<&str>) -> Result<SyntaxDefinition, ParseSyntaxError>
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::ne(&self, other: &SyntaxDefinition) -> bool
pub fn syntect::parsing::syntax_definition::SyntaxDefinition::serialize<__S>(&self, __serializer: __S) -> _serde::__private::Result<<__S as >::Ok, <__S as >::Error> where __S: _serde::Serializer
pub fn syntect::parsing::syntax_definition::context_iter<'a>(syntax_set: &'a SyntaxSet, context: &'a Context) -> MatchIter<'a>
pub fn syntect::util::LinesWithEndings::from(input: &'a str) -> LinesWithEndings<'a>
pub fn syntect::util::LinesWithEndings::next(&mut self) -> Option<&'a str>
pub fn syntect::util::as_24_bit_terminal_escaped(v: &[(Style, &str)], bg: bool) -> String
pub fn syntect::util::as_latex_escaped(v: &[(Style, &str)]) -> String
pub fn syntect::util::debug_print_ops(line: &str, ops: &[(usize, ScopeStackOp)])
pub fn syntect::util::modify_range<'a>(v: &[(Style, &'a str)], r: Range<usize>, modifier: StyleModifier) -> Vec<(Style, &'a str)>
pub fn syntect::util::split_at<'a, A: Clone>(v: &[(A, &'a str)], split_i: usize) -> (Vec<(A, &'a str)>, Vec<(A, &'a str)>)
pub mod syntect
pub mod syntect::dumps
pub mod syntect::easy
pub mod syntect::highlighting
pub mod syntect::html
pub mod syntect::parsing
pub mod syntect::parsing::syntax_definition
pub mod syntect::util
pub struct syntect::easy::HighlightFile<'a>
pub struct syntect::easy::HighlightLines<'a>
pub struct syntect::easy::ScopeRegionIterator<'a>
pub struct syntect::highlighting::Color
pub struct syntect::highlighting::FontStyle
pub struct syntect::highlighting::HighlightIterator<'a, 'b>
pub struct syntect::highlighting::HighlightState
pub struct syntect::highlighting::Highlighter<'a>
pub struct syntect::highlighting::RangedHighlightIterator<'a, 'b>
pub struct syntect::highlighting::ScopeSelector
pub struct syntect::highlighting::ScopeSelectors
pub struct syntect::highlighting::ScoredStyle
pub struct syntect::highlighting::Style
pub struct syntect::highlighting::StyleModifier
pub struct syntect::highlighting::Theme
pub struct syntect::highlighting::ThemeItem
pub struct syntect::highlighting::ThemeSet
pub struct syntect::highlighting::ThemeSettings
pub struct syntect::html::ClassedHTMLGenerator<'a>
pub struct syntect::parsing::MatchPower
pub struct syntect::parsing::ParseState
pub struct syntect::parsing::Regex
pub struct syntect::parsing::Region
pub struct syntect::parsing::SCOPE_REPO
pub struct syntect::parsing::Scope
pub struct syntect::parsing::ScopeRepository
pub struct syntect::parsing::ScopeStack
pub struct syntect::parsing::SyntaxReference
pub struct syntect::parsing::SyntaxSet
pub struct syntect::parsing::SyntaxSetBuilder
pub struct syntect::parsing::syntax_definition::Context
pub struct syntect::parsing::syntax_definition::ContextId
pub struct syntect::parsing::syntax_definition::MatchIter<'a>
pub struct syntect::parsing::syntax_definition::MatchPattern
pub struct syntect::parsing::syntax_definition::SyntaxDefinition
pub struct syntect::util::LinesWithEndings<'a>
pub struct field syntect::easy::HighlightFile::highlight_lines: HighlightLines<'a>
pub struct field syntect::easy::HighlightFile::reader: BufReader<File>
pub struct field syntect::highlighting::Color::a: u8
pub struct field syntect::highlighting::Color::b: u8
pub struct field syntect::highlighting::Color::g: u8
pub struct field syntect::highlighting::Color::r: u8
pub struct field syntect::highlighting::HighlightState::path: ScopeStack
pub struct field syntect::highlighting::ScopeSelector::excludes: Vec<ScopeStack>
pub struct field syntect::highlighting::ScopeSelector::path: ScopeStack
pub struct field syntect::highlighting::ScopeSelectors::selectors: Vec<ScopeSelector>
pub struct field syntect::highlighting::ScoredStyle::background: (MatchPower, Color)
pub struct field syntect::highlighting::ScoredStyle::font_style: (MatchPower, FontStyle)
pub struct field syntect::highlighting::ScoredStyle::foreground: (MatchPower, Color)
pub struct field syntect::highlighting::Style::background: Color
pub struct field syntect::highlighting::Style::font_style: FontStyle
pub struct field syntect::highlighting::Style::foreground: Color
pub struct field syntect::highlighting::StyleModifier::background: Option<Color>
pub struct field syntect::highlighting::StyleModifier::font_style: Option<FontStyle>
pub struct field syntect::highlighting::StyleModifier::foreground: Option<Color>
pub struct field syntect::highlighting::Theme::author: Option<String>
pub struct field syntect::highlighting::Theme::name: Option<String>
pub struct field syntect::highlighting::Theme::scopes: Vec<ThemeItem>
pub struct field syntect::highlighting::Theme::settings: ThemeSettings
pub struct field syntect::highlighting::ThemeItem::scope: ScopeSelectors
pub struct field syntect::highlighting::ThemeItem::style: StyleModifier
pub struct field syntect::highlighting::ThemeSet::themes: BTreeMap<String, Theme>
pub struct field syntect::highlighting::ThemeSettings::accent: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::active_guide: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::background: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::bracket_contents_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::bracket_contents_options: Option<UnderlineOption>
pub struct field syntect::highlighting::ThemeSettings::brackets_background: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::brackets_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::brackets_options: Option<UnderlineOption>
pub struct field syntect::highlighting::ThemeSettings::caret: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::find_highlight: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::find_highlight_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::guide: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::gutter: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::gutter_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::highlight: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::highlight_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::inactive_selection: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::inactive_selection_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::line_highlight: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::minimap_border: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::misspelling: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::phantom_css: Option<String>
pub struct field syntect::highlighting::ThemeSettings::popup_css: Option<String>
pub struct field syntect::highlighting::ThemeSettings::selection: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::selection_background: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::selection_border: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::selection_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::shadow: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::stack_guide: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::tags_foreground: Option<Color>
pub struct field syntect::highlighting::ThemeSettings::tags_options: Option<UnderlineOption>
pub struct field syntect::html::ClassStyle::SpacedPrefixed::prefix: &'static str
pub struct field syntect::parsing::MatchPower::0: f64
pub struct field syntect::parsing::ScopeStack::scopes: Vec<Scope>
pub struct field syntect::parsing::SyntaxReference::file_extensions: Vec<String>
pub struct field syntect::parsing::SyntaxReference::first_line_match: Option<String>
pub struct field syntect::parsing::SyntaxReference::hidden: bool
pub struct field syntect::parsing::SyntaxReference::name: String
pub struct field syntect::parsing::SyntaxReference::scope: Scope
pub struct field syntect::parsing::SyntaxReference::variables: HashMap<String, String>
pub struct field syntect::parsing::syntax_definition::Context::clear_scopes: Option<ClearAmount>
pub struct field syntect::parsing::syntax_definition::Context::meta_content_scope: Vec<Scope>
pub struct field syntect::parsing::syntax_definition::Context::meta_include_prototype: bool
pub struct field syntect::parsing::syntax_definition::Context::meta_scope: Vec<Scope>
pub struct field syntect::parsing::syntax_definition::Context::patterns: Vec<Pattern>
pub struct field syntect::parsing::syntax_definition::Context::prototype: Option<ContextId>
pub struct field syntect::parsing::syntax_definition::Context::uses_backrefs: bool
pub struct field syntect::parsing::syntax_definition::ContextReference::ByScope::scope: Scope
pub struct field syntect::parsing::syntax_definition::ContextReference::ByScope::sub_context: Option<String>
pub struct field syntect::parsing::syntax_definition::ContextReference::File::name: String
pub struct field syntect::parsing::syntax_definition::ContextReference::File::sub_context: Option<String>
pub struct field syntect::parsing::syntax_definition::MatchPattern::captures: Option<CaptureMapping>
pub struct field syntect::parsing::syntax_definition::MatchPattern::has_captures: bool
pub struct field syntect::parsing::syntax_definition::MatchPattern::operation: MatchOperation
pub struct field syntect::parsing::syntax_definition::MatchPattern::regex: Regex
pub struct field syntect::parsing::syntax_definition::MatchPattern::scope: Vec<Scope>
pub struct field syntect::parsing::syntax_definition::MatchPattern::with_prototype: Option<ContextReference>
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::contexts: HashMap<String, Context>
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::file_extensions: Vec<String>
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::first_line_match: Option<String>
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::hidden: bool
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::name: String
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::scope: Scope
pub struct field syntect::parsing::syntax_definition::SyntaxDefinition::variables: HashMap<String, String>
pub type syntect::easy::ScopeRegionIterator::Item = (&'a str, &'a ScopeStackOp)
pub type syntect::highlighting::Color::Err = ParseThemeError
pub type syntect::highlighting::FontStyle::Err = ParseThemeError
pub type syntect::highlighting::FontStyle::Output = Self
pub type syntect::highlighting::FontStyle::Output = Self
pub type syntect::highlighting::FontStyle::Output = Self
pub type syntect::highlighting::FontStyle::Output = Self
pub type syntect::highlighting::FontStyle::Output = Self
pub type syntect::highlighting::HighlightIterator::Item = (Style, &'b str)
pub type syntect::highlighting::RangedHighlightIterator::Item = (Style, &'b str, Range<usize>)
pub type syntect::highlighting::ScopeSelector::Err = ParseScopeError
pub type syntect::highlighting::ScopeSelectors::Err = ParseScopeError
pub type syntect::highlighting::UnderlineOption::Err = ParseThemeError
pub type syntect::parsing::SCOPE_REPO::Target = Mutex<ScopeRepository>
pub type syntect::parsing::Scope::Err = ParseScopeError
pub type syntect::parsing::ScopeStack::Err = ParseScopeError
pub type syntect::parsing::syntax_definition::CaptureMapping = Vec<(usize, Vec<Scope>)>
pub type syntect::parsing::syntax_definition::MatchIter::Item = (&'a Context, usize)
pub type syntect::util::LinesWithEndings::Item = &'a str
pub use syntect::parsing::SyntaxDefinition