List and diff the public API of Rust library crates between releases and commits. Detect breaking
API changes and semver violations.

Usage: cargo-public-api [OPTIONS] [COMMAND]

Commands:
  diff
          Diffing of public APIs
  help
          Print this message or the help of the given subcommand(s)

Options:
      --manifest-path <PATH>
          Path to `Cargo.toml`
          
          [default: Cargo.toml]

      --diff-git-checkouts <COMMIT_1> <COMMIT_2>
          Diff the public API across two different commits.
          
          The following steps are performed:
          
          1. Remember the current branch/commit
          
          2. Do a literal in-tree, in-place `git checkout` of the first commit
          
          3. Collect public API
          
          4. Do a literal in-tree, in-place `git checkout` of the second commit
          
          5. Collect public API
          
          6. Print the diff between public API in step 2 and step 4
          
          7. Restore the original branch/commit
          
          If you have local changes, git will refuse to do `git checkout`, so your work will not be
          discarded.
          
          Using the current git repo has the benefit of making it likely for the build to succeed.
          If we e.g. were to git clone a temporary copy of a commit ourselves, the risk is high that
          additional steps are needed before a build can succeed. Such as the need to set up git
          submodules.

      --force-git-checkouts
          Discard working tree changes during git checkouts when `--diff-git-checkouts` is used

      --diff-rustdoc-json <RUSTDOC_JSON_PATH_1> <RUSTDOC_JSON_PATH_2>
          Diff the public API across two different rustdoc JSON files

      --diff-published <CRATE_NAME@VERSION>
          Diff the current API against the API in a published version.
          
          Example:
          
          cargo public-api --diff-published your-crate@1.2.3

      --diff <TARGET>...
          Automatically resolves to either `--diff-git-checkouts`, `--diff-rustdoc-json`, or
          `--diff-published` depending on if args ends in `.json` or not, or if they contain `@`.
          
          Examples:
          
          cargo public-api --diff v0.2.0 v0.3.0
          
          resolves to
          
          cargo public-api --diff-git-checkouts v0.2.0 v0.3.0
          
          but
          
          cargo public-api --diff v0.2.0.json v0.3.0.json
          
          resolves to
          
          cargo public-api --diff-rustdoc-json v0.2.0.json v0.3.0.json
          
          and
          
          cargo public-api --diff some-crate@1.2.3
          
          resolves to
          
          cargo public-api --diff-published some-crate@1.2.3

      --deny <DENY>
          Exit with failure if the specified API diff is detected.
          
          Can be combined. For example, to only allow additions to the API, use `--deny=added
          --deny=changed`.

          Possible values:
          - all:     All forms of API diffs are denied: additions, changes, deletions
          - added:   Deny added things in API diffs
          - changed: Deny changed things in API diffs
          - removed: Deny removed things in API diffs

      --color [<COLOR>]
          How to color the output. By default, `--color=auto` is active. Using just `--color`
          without an arg is equivalent to `--color=always`

          Possible values:
          - auto:
            Colors will be used if stdout is a terminal. If you pipe the output to a file, colors
            will be disabled by default
          - never:
            Colors will never be used
          - always:
            Colors will always be used

  -s, --simplified
          Omit items that belong to Blanket Implementations and Auto Trait Implementations.
          
          This makes the output significantly less noisy and repetitive, at the cost of not fully
          describing the public API.
          
          Examples of Blanket Implementations: `impl<T> Any for T`, `impl<T> Borrow<T> for T`, and
          `impl<T, U> Into<U> for T where U: From<T>`
          
          Examples of Auto Trait Implementations: `impl Send for Foo`, `impl Sync for Foo`, and
          `impl Unpin for Foo`

      --toolchain <TOOLCHAIN>
          Build rustdoc JSON with a toolchain other than `nightly`.
          
          Consider using `cargo +toolchain public-api` instead.
          
          Useful if you have built a toolchain from source for example, or if you want to use a
          fixed toolchain in CI.

      --target <TARGET>
          Build for the target triple

  -F, --features <FEATURES>...
          Space or comma separated list of features to activate

      --all-features
          Activate all available features

      --no-default-features
          Do not activate the `default` feature

  -p, --package <PACKAGE>
          Name of package in workspace to list or diff the public API for

  -h, --help
          Print help information (use `-h` for a summary)

  -V, --version
          Print version information
